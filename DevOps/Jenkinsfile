pipeline {
    agent any
    
    environment {
        // Customize these variables
        DOCKER_IMAGE = 'test'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        GITHUB_REPO_URL = 'https://github.com/RazSherf/Stocker'
        // DOCKER_REGISTRY = 'your-docker-registry.com' // e.g., Docker Hub, ECR, etc.
        // DOCKER_CREDENTIALS_ID = 'docker-registry-credentials'
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Checkout code from GitHub repository
                git branch: 'jenkins', 
                    url: "${GITHUB_REPO_URL}"
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                }
            }
        }
        
        // stage('Push to Docker Registry') {
        //     steps {
        //         script {
        //             // Push image to Docker registry
        //             docker.withRegistry("https://${DOCKER_REGISTRY}", "${DOCKER_CREDENTIALS_ID}") {
        //                 docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push()
                        
        //                 // Also push 'latest' tag
        //                 docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push('latest')
        //             }
        //         }
        //     }
        // }
        
    //     stage('Deploy') {
    //         steps {
    //             script {
    //                 // Example deployment - you'll need to customize this based on your infrastructure
    //                 // This could be:
    //                 // - SSH into a server and pull/run the new image
    //                 // - Use kubectl to update a Kubernetes deployment
    //                 // - Use docker-compose or docker swarm
    //                 sh """
    //                     echo "Deploying ${DOCKER_IMAGE}:${DOCKER_TAG}"
    //                     # Add your deployment commands here
    //                     # For example:
    //                     # docker stop existing-container || true
    //                     # docker rm existing-container || true
    //                     # docker run -d --name flask-app -p 5000:5000 ${DOCKER_IMAGE}:${DOCKER_TAG}
    //                 """
    //             }
    //         }
    //     }
    }
    
    post {
        success {
            echo 'Pipeline completed successfully! New image built and pushed.'
        }
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
        cleanup {
            // Clean up local docker images to prevent disk space issues
            sh 'docker system prune -f'
        }
    }
}